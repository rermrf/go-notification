// Code generated by MockGen. DO NOT EDIT.
// Source: ./monitor.go
//
// Generated by this command:
//
//	mockgen -source=./monitor.go -package=monitormocks -destination=./mocks/monitor.mock.go DBMonitor
//

// Package monitormocks is a generated GoMock package.
package monitormocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBMonitor is a mock of DBMonitor interface.
type MockDBMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockDBMonitorMockRecorder
	isgomock struct{}
}

// MockDBMonitorMockRecorder is the mock recorder for MockDBMonitor.
type MockDBMonitorMockRecorder struct {
	mock *MockDBMonitor
}

// NewMockDBMonitor creates a new mock instance.
func NewMockDBMonitor(ctrl *gomock.Controller) *MockDBMonitor {
	mock := &MockDBMonitor{ctrl: ctrl}
	mock.recorder = &MockDBMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBMonitor) EXPECT() *MockDBMonitorMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockDBMonitor) Health() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockDBMonitorMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockDBMonitor)(nil).Health))
}

// Report mocks base method.
func (m *MockDBMonitor) Report(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Report", err)
}

// Report indicates an expected call of Report.
func (mr *MockDBMonitorMockRecorder) Report(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockDBMonitor)(nil).Report), err)
}
