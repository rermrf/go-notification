// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -package=batchmocks -destination=./mocks/adjuster.mock.go -typed Adjuster
//

// Package batchmocks is a generated GoMock package.
package batchmocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAdjuster is a mock of Adjuster interface.
type MockAdjuster struct {
	ctrl     *gomock.Controller
	recorder *MockAdjusterMockRecorder
	isgomock struct{}
}

// MockAdjusterMockRecorder is the mock recorder for MockAdjuster.
type MockAdjusterMockRecorder struct {
	mock *MockAdjuster
}

// NewMockAdjuster creates a new mock instance.
func NewMockAdjuster(ctrl *gomock.Controller) *MockAdjuster {
	mock := &MockAdjuster{ctrl: ctrl}
	mock.recorder = &MockAdjusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdjuster) EXPECT() *MockAdjusterMockRecorder {
	return m.recorder
}

// Adjust mocks base method.
func (m *MockAdjuster) Adjust(ctx context.Context, responseTime time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Adjust", ctx, responseTime)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Adjust indicates an expected call of Adjust.
func (mr *MockAdjusterMockRecorder) Adjust(ctx, responseTime any) *MockAdjusterAdjustCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Adjust", reflect.TypeOf((*MockAdjuster)(nil).Adjust), ctx, responseTime)
	return &MockAdjusterAdjustCall{Call: call}
}

// MockAdjusterAdjustCall wrap *gomock.Call
type MockAdjusterAdjustCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAdjusterAdjustCall) Return(arg0 int, arg1 error) *MockAdjusterAdjustCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAdjusterAdjustCall) Do(f func(context.Context, time.Duration) (int, error)) *MockAdjusterAdjustCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAdjusterAdjustCall) DoAndReturn(f func(context.Context, time.Duration) (int, error)) *MockAdjusterAdjustCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
