// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go
//
// Generated by this command:
//
//	mockgen -source=./producer.go -package=evtmocks -destination=../mocks/conn_pool_event_producer.mock.go -typed ConnPoolEventProducer
//

// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	failover "go-notification/internal/event/failover"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnPoolEventProducer is a mock of ConnPoolEventProducer interface.
type MockConnPoolEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockConnPoolEventProducerMockRecorder
	isgomock struct{}
}

// MockConnPoolEventProducerMockRecorder is the mock recorder for MockConnPoolEventProducer.
type MockConnPoolEventProducerMockRecorder struct {
	mock *MockConnPoolEventProducer
}

// NewMockConnPoolEventProducer creates a new mock instance.
func NewMockConnPoolEventProducer(ctrl *gomock.Controller) *MockConnPoolEventProducer {
	mock := &MockConnPoolEventProducer{ctrl: ctrl}
	mock.recorder = &MockConnPoolEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnPoolEventProducer) EXPECT() *MockConnPoolEventProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockConnPoolEventProducer) Produce(ctx context.Context, evt failover.ConnPoolEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockConnPoolEventProducerMockRecorder) Produce(ctx, evt any) *MockConnPoolEventProducerProduceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockConnPoolEventProducer)(nil).Produce), ctx, evt)
	return &MockConnPoolEventProducerProduceCall{Call: call}
}

// MockConnPoolEventProducerProduceCall wrap *gomock.Call
type MockConnPoolEventProducerProduceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnPoolEventProducerProduceCall) Return(arg0 error) *MockConnPoolEventProducerProduceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnPoolEventProducerProduceCall) Do(f func(context.Context, failover.ConnPoolEvent) error) *MockConnPoolEventProducerProduceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnPoolEventProducerProduceCall) DoAndReturn(f func(context.Context, failover.ConnPoolEvent) error) *MockConnPoolEventProducerProduceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
