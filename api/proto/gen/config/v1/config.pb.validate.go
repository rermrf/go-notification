// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config/v1/config.proto

package configv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RetryConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetryConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RetryConfigMultiError, or
// nil if none found.
func (m *RetryConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxAttempts

	// no validation rules for InitialBackoffMs

	// no validation rules for MaxBackoffMs

	// no validation rules for BackoffMultiplier

	if len(errors) > 0 {
		return RetryConfigMultiError(errors)
	}

	return nil
}

// RetryConfigMultiError is an error wrapping multiple validation errors
// returned by RetryConfig.ValidateAll() if the designated constraints aren't met.
type RetryConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryConfigMultiError) AllErrors() []error { return m }

// RetryConfigValidationError is the validation error returned by
// RetryConfig.Validate if the designated constraints aren't met.
type RetryConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryConfigValidationError) ErrorName() string { return "RetryConfigValidationError" }

// Error satisfies the builtin error interface
func (e RetryConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryConfigValidationError{}

// Validate checks the field values on ChannelItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelItemMultiError, or
// nil if none found.
func (m *ChannelItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Priority

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ChannelItemMultiError(errors)
	}

	return nil
}

// ChannelItemMultiError is an error wrapping multiple validation errors
// returned by ChannelItem.ValidateAll() if the designated constraints aren't met.
type ChannelItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelItemMultiError) AllErrors() []error { return m }

// ChannelItemValidationError is the validation error returned by
// ChannelItem.Validate if the designated constraints aren't met.
type ChannelItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelItemValidationError) ErrorName() string { return "ChannelItemValidationError" }

// Error satisfies the builtin error interface
func (e ChannelItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelItemValidationError{}

// Validate checks the field values on ChannelConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelConfigMultiError, or
// nil if none found.
func (m *ChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfigMultiError is an error wrapping multiple validation errors
// returned by ChannelConfig.ValidateAll() if the designated constraints
// aren't met.
type ChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfigValidationError is the validation error returned by
// ChannelConfig.Validate if the designated constraints aren't met.
type ChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfigValidationError) ErrorName() string { return "ChannelConfigValidationError" }

// Error satisfies the builtin error interface
func (e ChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfigValidationError{}

// Validate checks the field values on TxnConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxnConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxnConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxnConfigMultiError, or nil
// if none found.
func (m *TxnConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TxnConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for InitialDelay

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TxnConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TxnConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TxnConfigValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TxnConfigMultiError(errors)
	}

	return nil
}

// TxnConfigMultiError is an error wrapping multiple validation errors returned
// by TxnConfig.ValidateAll() if the designated constraints aren't met.
type TxnConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxnConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxnConfigMultiError) AllErrors() []error { return m }

// TxnConfigValidationError is the validation error returned by
// TxnConfig.Validate if the designated constraints aren't met.
type TxnConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxnConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxnConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxnConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxnConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxnConfigValidationError) ErrorName() string { return "TxnConfigValidationError" }

// Error satisfies the builtin error interface
func (e TxnConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxnConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxnConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxnConfigValidationError{}

// Validate checks the field values on MonthlyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonthlyConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthlyConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonthlyConfigMultiError, or
// nil if none found.
func (m *MonthlyConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthlyConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sms

	// no validation rules for Email

	if len(errors) > 0 {
		return MonthlyConfigMultiError(errors)
	}

	return nil
}

// MonthlyConfigMultiError is an error wrapping multiple validation errors
// returned by MonthlyConfig.ValidateAll() if the designated constraints
// aren't met.
type MonthlyConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthlyConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthlyConfigMultiError) AllErrors() []error { return m }

// MonthlyConfigValidationError is the validation error returned by
// MonthlyConfig.Validate if the designated constraints aren't met.
type MonthlyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthlyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthlyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthlyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthlyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthlyConfigValidationError) ErrorName() string { return "MonthlyConfigValidationError" }

// Error satisfies the builtin error interface
func (e MonthlyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthlyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthlyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthlyConfigValidationError{}

// Validate checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaConfigMultiError, or
// nil if none found.
func (m *QuotaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMonthly()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Monthly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "Monthly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonthly()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaConfigValidationError{
				field:  "Monthly",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotaConfigMultiError(errors)
	}

	return nil
}

// QuotaConfigMultiError is an error wrapping multiple validation errors
// returned by QuotaConfig.ValidateAll() if the designated constraints aren't met.
type QuotaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaConfigMultiError) AllErrors() []error { return m }

// QuotaConfigValidationError is the validation error returned by
// QuotaConfig.Validate if the designated constraints aren't met.
type QuotaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaConfigValidationError) ErrorName() string { return "QuotaConfigValidationError" }

// Error satisfies the builtin error interface
func (e QuotaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaConfigValidationError{}

// Validate checks the field values on CallbackConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallbackConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallbackConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallbackConfigMultiError,
// or nil if none found.
func (m *CallbackConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CallbackConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallbackConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallbackConfigValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallbackConfigValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallbackConfigMultiError(errors)
	}

	return nil
}

// CallbackConfigMultiError is an error wrapping multiple validation errors
// returned by CallbackConfig.ValidateAll() if the designated constraints
// aren't met.
type CallbackConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallbackConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallbackConfigMultiError) AllErrors() []error { return m }

// CallbackConfigValidationError is the validation error returned by
// CallbackConfig.Validate if the designated constraints aren't met.
type CallbackConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallbackConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallbackConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallbackConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallbackConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallbackConfigValidationError) ErrorName() string { return "CallbackConfigValidationError" }

// Error satisfies the builtin error interface
func (e CallbackConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallbackConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallbackConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallbackConfigValidationError{}

// Validate checks the field values on BusinessConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessConfigMultiError,
// or nil if none found.
func (m *BusinessConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessConfigValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTxnConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "TxnConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "TxnConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxnConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessConfigValidationError{
				field:  "TxnConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReteLimit

	if all {
		switch v := interface{}(m.GetQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessConfigValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallbackConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessConfigValidationError{
					field:  "CallbackConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallbackConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessConfigValidationError{
				field:  "CallbackConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessConfigMultiError(errors)
	}

	return nil
}

// BusinessConfigMultiError is an error wrapping multiple validation errors
// returned by BusinessConfig.ValidateAll() if the designated constraints
// aren't met.
type BusinessConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessConfigMultiError) AllErrors() []error { return m }

// BusinessConfigValidationError is the validation error returned by
// BusinessConfig.Validate if the designated constraints aren't met.
type BusinessConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessConfigValidationError) ErrorName() string { return "BusinessConfigValidationError" }

// Error satisfies the builtin error interface
func (e BusinessConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessConfigValidationError{}

// Validate checks the field values on GetByIDsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIDsRequestMultiError, or nil if none found.
func (m *GetByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetByIDsRequestMultiError(errors)
	}

	return nil
}

// GetByIDsRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIDsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDsRequestMultiError) AllErrors() []error { return m }

// GetByIDsRequestValidationError is the validation error returned by
// GetByIDsRequest.Validate if the designated constraints aren't met.
type GetByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDsRequestValidationError) ErrorName() string { return "GetByIDsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDsRequestValidationError{}

// Validate checks the field values on GetByIDsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIDsResponseMultiError, or nil if none found.
func (m *GetByIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetConfigs()))
		i := 0
		for key := range m.GetConfigs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigs()[key]
			_ = val

			// no validation rules for Configs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetByIDsResponseValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetByIDsResponseValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetByIDsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetByIDsResponseMultiError(errors)
	}

	return nil
}

// GetByIDsResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIDsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDsResponseMultiError) AllErrors() []error { return m }

// GetByIDsResponseValidationError is the validation error returned by
// GetByIDsResponse.Validate if the designated constraints aren't met.
type GetByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDsResponseValidationError) ErrorName() string { return "GetByIDsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDsResponseValidationError{}

// Validate checks the field values on GetByIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIDRequestMultiError,
// or nil if none found.
func (m *GetByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIDRequestMultiError(errors)
	}

	return nil
}

// GetByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDRequestMultiError) AllErrors() []error { return m }

// GetByIDRequestValidationError is the validation error returned by
// GetByIDRequest.Validate if the designated constraints aren't met.
type GetByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDRequestValidationError) ErrorName() string { return "GetByIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDRequestValidationError{}

// Validate checks the field values on GetByIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIDResponseMultiError, or nil if none found.
func (m *GetByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByIDResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByIDResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByIDResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByIDResponseMultiError(errors)
	}

	return nil
}

// GetByIDResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIDResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDResponseMultiError) AllErrors() []error { return m }

// GetByIDResponseValidationError is the validation error returned by
// GetByIDResponse.Validate if the designated constraints aren't met.
type GetByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDResponseValidationError) ErrorName() string { return "GetByIDResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on SaveConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveConfigRequestMultiError, or nil if none found.
func (m *SaveConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveConfigRequestMultiError(errors)
	}

	return nil
}

// SaveConfigRequestMultiError is an error wrapping multiple validation errors
// returned by SaveConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type SaveConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveConfigRequestMultiError) AllErrors() []error { return m }

// SaveConfigRequestValidationError is the validation error returned by
// SaveConfigRequest.Validate if the designated constraints aren't met.
type SaveConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveConfigRequestValidationError) ErrorName() string {
	return "SaveConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveConfigRequestValidationError{}

// Validate checks the field values on SaveConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveConfigResponseMultiError, or nil if none found.
func (m *SaveConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SaveConfigResponseMultiError(errors)
	}

	return nil
}

// SaveConfigResponseMultiError is an error wrapping multiple validation errors
// returned by SaveConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type SaveConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveConfigResponseMultiError) AllErrors() []error { return m }

// SaveConfigResponseValidationError is the validation error returned by
// SaveConfigResponse.Validate if the designated constraints aren't met.
type SaveConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveConfigResponseValidationError) ErrorName() string {
	return "SaveConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveConfigResponseValidationError{}
