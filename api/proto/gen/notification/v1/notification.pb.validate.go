// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification/v1/notification.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendStrategyMultiError, or
// nil if none found.
func (m *SendStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.StrategyType.(type) {
	case *SendStrategy_Immediate:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImmediate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Immediate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImmediate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Immediate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Delayed:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelayed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Delayed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelayed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Delayed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Scheduled:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScheduled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Scheduled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScheduled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Scheduled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_TimeWindow:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeWindow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "TimeWindow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeWindow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "TimeWindow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendStrategy_Deadline:
		if v == nil {
			err := SendStrategyValidationError{
				field:  "StrategyType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeadline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendStrategyValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SendStrategyMultiError(errors)
	}

	return nil
}

// SendStrategyMultiError is an error wrapping multiple validation errors
// returned by SendStrategy.ValidateAll() if the designated constraints aren't met.
type SendStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategyMultiError) AllErrors() []error { return m }

// SendStrategyValidationError is the validation error returned by
// SendStrategy.Validate if the designated constraints aren't met.
type SendStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategyValidationError) ErrorName() string { return "SendStrategyValidationError" }

// Error satisfies the builtin error interface
func (e SendStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategyValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Channel

	// no validation rules for TemplateId

	// no validation rules for TemplateParams

	if all {
		switch v := interface{}(m.GetSendStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "SendStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "SendStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "SendStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Receiver

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}

// Validate checks the field values on SendNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationResponseMultiError, or nil if none found.
func (m *SendNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	// no validation rules for Status

	// no validation rules for ErrorCode

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return SendNotificationResponseMultiError(errors)
	}

	return nil
}

// SendNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by SendNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationResponseMultiError) AllErrors() []error { return m }

// SendNotificationResponseValidationError is the validation error returned by
// SendNotificationResponse.Validate if the designated constraints aren't met.
type SendNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationResponseValidationError) ErrorName() string {
	return "SendNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationResponseValidationError{}

// Validate checks the field values on SendNotificationAsyncRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationAsyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationAsyncRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationAsyncRequestMultiError, or nil if none found.
func (m *SendNotificationAsyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationAsyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNotificationAsyncRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNotificationAsyncRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNotificationAsyncRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNotificationAsyncRequestMultiError(errors)
	}

	return nil
}

// SendNotificationAsyncRequestMultiError is an error wrapping multiple
// validation errors returned by SendNotificationAsyncRequest.ValidateAll() if
// the designated constraints aren't met.
type SendNotificationAsyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationAsyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationAsyncRequestMultiError) AllErrors() []error { return m }

// SendNotificationAsyncRequestValidationError is the validation error returned
// by SendNotificationAsyncRequest.Validate if the designated constraints
// aren't met.
type SendNotificationAsyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationAsyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationAsyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationAsyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationAsyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationAsyncRequestValidationError) ErrorName() string {
	return "SendNotificationAsyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationAsyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationAsyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationAsyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationAsyncRequestValidationError{}

// Validate checks the field values on SendNotificationAsyncResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationAsyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationAsyncResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendNotificationAsyncResponseMultiError, or nil if none found.
func (m *SendNotificationAsyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationAsyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	// no validation rules for ErrorCode

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return SendNotificationAsyncResponseMultiError(errors)
	}

	return nil
}

// SendNotificationAsyncResponseMultiError is an error wrapping multiple
// validation errors returned by SendNotificationAsyncResponse.ValidateAll()
// if the designated constraints aren't met.
type SendNotificationAsyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationAsyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationAsyncResponseMultiError) AllErrors() []error { return m }

// SendNotificationAsyncResponseValidationError is the validation error
// returned by SendNotificationAsyncResponse.Validate if the designated
// constraints aren't met.
type SendNotificationAsyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationAsyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationAsyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationAsyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationAsyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationAsyncResponseValidationError) ErrorName() string {
	return "SendNotificationAsyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationAsyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationAsyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationAsyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationAsyncResponseValidationError{}

// Validate checks the field values on SendNotificationBatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationBatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationBatchRequestMultiError, or nil if none found.
func (m *SendNotificationBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendNotificationBatchRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendNotificationBatchRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendNotificationBatchRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendNotificationBatchRequestMultiError(errors)
	}

	return nil
}

// SendNotificationBatchRequestMultiError is an error wrapping multiple
// validation errors returned by SendNotificationBatchRequest.ValidateAll() if
// the designated constraints aren't met.
type SendNotificationBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationBatchRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationBatchRequestMultiError) AllErrors() []error { return m }

// SendNotificationBatchRequestValidationError is the validation error returned
// by SendNotificationBatchRequest.Validate if the designated constraints
// aren't met.
type SendNotificationBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationBatchRequestValidationError) ErrorName() string {
	return "SendNotificationBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationBatchRequestValidationError{}

// Validate checks the field values on SendNotificationBatchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationBatchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendNotificationBatchResponseMultiError, or nil if none found.
func (m *SendNotificationBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendNotificationBatchResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendNotificationBatchResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendNotificationBatchResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for SuccessCount

	if len(errors) > 0 {
		return SendNotificationBatchResponseMultiError(errors)
	}

	return nil
}

// SendNotificationBatchResponseMultiError is an error wrapping multiple
// validation errors returned by SendNotificationBatchResponse.ValidateAll()
// if the designated constraints aren't met.
type SendNotificationBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationBatchResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationBatchResponseMultiError) AllErrors() []error { return m }

// SendNotificationBatchResponseValidationError is the validation error
// returned by SendNotificationBatchResponse.Validate if the designated
// constraints aren't met.
type SendNotificationBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationBatchResponseValidationError) ErrorName() string {
	return "SendNotificationBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationBatchResponseValidationError{}

// Validate checks the field values on SendNotificationBatchAsyncRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendNotificationBatchAsyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationBatchAsyncRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendNotificationBatchAsyncRequestMultiError, or nil if none found.
func (m *SendNotificationBatchAsyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationBatchAsyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendNotificationBatchAsyncRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendNotificationBatchAsyncRequestValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendNotificationBatchAsyncRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendNotificationBatchAsyncRequestMultiError(errors)
	}

	return nil
}

// SendNotificationBatchAsyncRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendNotificationBatchAsyncRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationBatchAsyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationBatchAsyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationBatchAsyncRequestMultiError) AllErrors() []error { return m }

// SendNotificationBatchAsyncRequestValidationError is the validation error
// returned by SendNotificationBatchAsyncRequest.Validate if the designated
// constraints aren't met.
type SendNotificationBatchAsyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationBatchAsyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationBatchAsyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationBatchAsyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationBatchAsyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationBatchAsyncRequestValidationError) ErrorName() string {
	return "SendNotificationBatchAsyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationBatchAsyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationBatchAsyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationBatchAsyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationBatchAsyncRequestValidationError{}

// Validate checks the field values on SendNotificationBatchAsyncResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendNotificationBatchAsyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationBatchAsyncResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendNotificationBatchAsyncResponseMultiError, or nil if none found.
func (m *SendNotificationBatchAsyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationBatchAsyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendNotificationBatchAsyncResponseMultiError(errors)
	}

	return nil
}

// SendNotificationBatchAsyncResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendNotificationBatchAsyncResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationBatchAsyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationBatchAsyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationBatchAsyncResponseMultiError) AllErrors() []error { return m }

// SendNotificationBatchAsyncResponseValidationError is the validation error
// returned by SendNotificationBatchAsyncResponse.Validate if the designated
// constraints aren't met.
type SendNotificationBatchAsyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationBatchAsyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationBatchAsyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationBatchAsyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationBatchAsyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationBatchAsyncResponseValidationError) ErrorName() string {
	return "SendNotificationBatchAsyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationBatchAsyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationBatchAsyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationBatchAsyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationBatchAsyncResponseValidationError{}

// Validate checks the field values on PrepareTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrepareTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareTxRequestMultiError, or nil if none found.
func (m *PrepareTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareTxRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareTxRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareTxRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrepareTxRequestMultiError(errors)
	}

	return nil
}

// PrepareTxRequestMultiError is an error wrapping multiple validation errors
// returned by PrepareTxRequest.ValidateAll() if the designated constraints
// aren't met.
type PrepareTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareTxRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareTxRequestMultiError) AllErrors() []error { return m }

// PrepareTxRequestValidationError is the validation error returned by
// PrepareTxRequest.Validate if the designated constraints aren't met.
type PrepareTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareTxRequestValidationError) ErrorName() string { return "PrepareTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e PrepareTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareTxRequestValidationError{}

// Validate checks the field values on PrepareTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PrepareTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareTxResponseMultiError, or nil if none found.
func (m *PrepareTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PrepareTxResponseMultiError(errors)
	}

	return nil
}

// PrepareTxResponseMultiError is an error wrapping multiple validation errors
// returned by PrepareTxResponse.ValidateAll() if the designated constraints
// aren't met.
type PrepareTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareTxResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareTxResponseMultiError) AllErrors() []error { return m }

// PrepareTxResponseValidationError is the validation error returned by
// PrepareTxResponse.Validate if the designated constraints aren't met.
type PrepareTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareTxResponseValidationError) ErrorName() string {
	return "PrepareTxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareTxResponseValidationError{}

// Validate checks the field values on CommitTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommitTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTxRequestMultiError, or nil if none found.
func (m *CommitTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return CommitTxRequestMultiError(errors)
	}

	return nil
}

// CommitTxRequestMultiError is an error wrapping multiple validation errors
// returned by CommitTxRequest.ValidateAll() if the designated constraints
// aren't met.
type CommitTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTxRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTxRequestMultiError) AllErrors() []error { return m }

// CommitTxRequestValidationError is the validation error returned by
// CommitTxRequest.Validate if the designated constraints aren't met.
type CommitTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTxRequestValidationError) ErrorName() string { return "CommitTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e CommitTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTxRequestValidationError{}

// Validate checks the field values on CommitTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommitTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTxResponseMultiError, or nil if none found.
func (m *CommitTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CommitTxResponseMultiError(errors)
	}

	return nil
}

// CommitTxResponseMultiError is an error wrapping multiple validation errors
// returned by CommitTxResponse.ValidateAll() if the designated constraints
// aren't met.
type CommitTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTxResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTxResponseMultiError) AllErrors() []error { return m }

// CommitTxResponseValidationError is the validation error returned by
// CommitTxResponse.Validate if the designated constraints aren't met.
type CommitTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTxResponseValidationError) ErrorName() string { return "CommitTxResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommitTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTxResponseValidationError{}

// Validate checks the field values on CancelTxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelTxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTxRequestMultiError, or nil if none found.
func (m *CancelTxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return CancelTxRequestMultiError(errors)
	}

	return nil
}

// CancelTxRequestMultiError is an error wrapping multiple validation errors
// returned by CancelTxRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelTxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTxRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTxRequestMultiError) AllErrors() []error { return m }

// CancelTxRequestValidationError is the validation error returned by
// CancelTxRequest.Validate if the designated constraints aren't met.
type CancelTxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTxRequestValidationError) ErrorName() string { return "CancelTxRequestValidationError" }

// Error satisfies the builtin error interface
func (e CancelTxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTxRequestValidationError{}

// Validate checks the field values on CancelTxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelTxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTxResponseMultiError, or nil if none found.
func (m *CancelTxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelTxResponseMultiError(errors)
	}

	return nil
}

// CancelTxResponseMultiError is an error wrapping multiple validation errors
// returned by CancelTxResponse.ValidateAll() if the designated constraints
// aren't met.
type CancelTxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTxResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTxResponseMultiError) AllErrors() []error { return m }

// CancelTxResponseValidationError is the validation error returned by
// CancelTxResponse.Validate if the designated constraints aren't met.
type CancelTxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTxResponseValidationError) ErrorName() string { return "CancelTxResponseValidationError" }

// Error satisfies the builtin error interface
func (e CancelTxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTxResponseValidationError{}

// Validate checks the field values on SendStrategy_ImmediateStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStrategy_ImmediateStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy_ImmediateStrategy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStrategy_ImmediateStrategyMultiError, or nil if none found.
func (m *SendStrategy_ImmediateStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy_ImmediateStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendStrategy_ImmediateStrategyMultiError(errors)
	}

	return nil
}

// SendStrategy_ImmediateStrategyMultiError is an error wrapping multiple
// validation errors returned by SendStrategy_ImmediateStrategy.ValidateAll()
// if the designated constraints aren't met.
type SendStrategy_ImmediateStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategy_ImmediateStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategy_ImmediateStrategyMultiError) AllErrors() []error { return m }

// SendStrategy_ImmediateStrategyValidationError is the validation error
// returned by SendStrategy_ImmediateStrategy.Validate if the designated
// constraints aren't met.
type SendStrategy_ImmediateStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategy_ImmediateStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategy_ImmediateStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategy_ImmediateStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategy_ImmediateStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategy_ImmediateStrategyValidationError) ErrorName() string {
	return "SendStrategy_ImmediateStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e SendStrategy_ImmediateStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy_ImmediateStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategy_ImmediateStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategy_ImmediateStrategyValidationError{}

// Validate checks the field values on SendStrategy_DelayedStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStrategy_DelayedStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy_DelayedStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendStrategy_DelayedStrategyMultiError, or nil if none found.
func (m *SendStrategy_DelayedStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy_DelayedStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DelaySeconds

	if len(errors) > 0 {
		return SendStrategy_DelayedStrategyMultiError(errors)
	}

	return nil
}

// SendStrategy_DelayedStrategyMultiError is an error wrapping multiple
// validation errors returned by SendStrategy_DelayedStrategy.ValidateAll() if
// the designated constraints aren't met.
type SendStrategy_DelayedStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategy_DelayedStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategy_DelayedStrategyMultiError) AllErrors() []error { return m }

// SendStrategy_DelayedStrategyValidationError is the validation error returned
// by SendStrategy_DelayedStrategy.Validate if the designated constraints
// aren't met.
type SendStrategy_DelayedStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategy_DelayedStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategy_DelayedStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategy_DelayedStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategy_DelayedStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategy_DelayedStrategyValidationError) ErrorName() string {
	return "SendStrategy_DelayedStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e SendStrategy_DelayedStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy_DelayedStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategy_DelayedStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategy_DelayedStrategyValidationError{}

// Validate checks the field values on SendStrategy_ScheduledStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStrategy_ScheduledStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy_ScheduledStrategy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStrategy_ScheduledStrategyMultiError, or nil if none found.
func (m *SendStrategy_ScheduledStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy_ScheduledStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendStrategy_ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendStrategy_ScheduledStrategyValidationError{
					field:  "SendTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendStrategy_ScheduledStrategyValidationError{
				field:  "SendTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendStrategy_ScheduledStrategyMultiError(errors)
	}

	return nil
}

// SendStrategy_ScheduledStrategyMultiError is an error wrapping multiple
// validation errors returned by SendStrategy_ScheduledStrategy.ValidateAll()
// if the designated constraints aren't met.
type SendStrategy_ScheduledStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategy_ScheduledStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategy_ScheduledStrategyMultiError) AllErrors() []error { return m }

// SendStrategy_ScheduledStrategyValidationError is the validation error
// returned by SendStrategy_ScheduledStrategy.Validate if the designated
// constraints aren't met.
type SendStrategy_ScheduledStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategy_ScheduledStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategy_ScheduledStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategy_ScheduledStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategy_ScheduledStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategy_ScheduledStrategyValidationError) ErrorName() string {
	return "SendStrategy_ScheduledStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e SendStrategy_ScheduledStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy_ScheduledStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategy_ScheduledStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategy_ScheduledStrategyValidationError{}

// Validate checks the field values on SendStrategy_TimeWindowStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStrategy_TimeWindowStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy_TimeWindowStrategy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStrategy_TimeWindowStrategyMultiError, or nil if none found.
func (m *SendStrategy_TimeWindowStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy_TimeWindowStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTimeMilliseconds

	// no validation rules for EndTimeMilliseconds

	if len(errors) > 0 {
		return SendStrategy_TimeWindowStrategyMultiError(errors)
	}

	return nil
}

// SendStrategy_TimeWindowStrategyMultiError is an error wrapping multiple
// validation errors returned by SendStrategy_TimeWindowStrategy.ValidateAll()
// if the designated constraints aren't met.
type SendStrategy_TimeWindowStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategy_TimeWindowStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategy_TimeWindowStrategyMultiError) AllErrors() []error { return m }

// SendStrategy_TimeWindowStrategyValidationError is the validation error
// returned by SendStrategy_TimeWindowStrategy.Validate if the designated
// constraints aren't met.
type SendStrategy_TimeWindowStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategy_TimeWindowStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategy_TimeWindowStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategy_TimeWindowStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategy_TimeWindowStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategy_TimeWindowStrategyValidationError) ErrorName() string {
	return "SendStrategy_TimeWindowStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e SendStrategy_TimeWindowStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy_TimeWindowStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategy_TimeWindowStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategy_TimeWindowStrategyValidationError{}

// Validate checks the field values on SendStrategy_DeadlineStrategy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStrategy_DeadlineStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStrategy_DeadlineStrategy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendStrategy_DeadlineStrategyMultiError, or nil if none found.
func (m *SendStrategy_DeadlineStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStrategy_DeadlineStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendStrategy_DeadlineStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendStrategy_DeadlineStrategyValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendStrategy_DeadlineStrategyValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendStrategy_DeadlineStrategyMultiError(errors)
	}

	return nil
}

// SendStrategy_DeadlineStrategyMultiError is an error wrapping multiple
// validation errors returned by SendStrategy_DeadlineStrategy.ValidateAll()
// if the designated constraints aren't met.
type SendStrategy_DeadlineStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStrategy_DeadlineStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStrategy_DeadlineStrategyMultiError) AllErrors() []error { return m }

// SendStrategy_DeadlineStrategyValidationError is the validation error
// returned by SendStrategy_DeadlineStrategy.Validate if the designated
// constraints aren't met.
type SendStrategy_DeadlineStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStrategy_DeadlineStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStrategy_DeadlineStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStrategy_DeadlineStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStrategy_DeadlineStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStrategy_DeadlineStrategyValidationError) ErrorName() string {
	return "SendStrategy_DeadlineStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e SendStrategy_DeadlineStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStrategy_DeadlineStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStrategy_DeadlineStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStrategy_DeadlineStrategyValidationError{}
