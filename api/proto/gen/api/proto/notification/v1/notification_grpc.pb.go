// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/notification/v1/notification.proto

package notificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendNotification_FullMethodName           = "/notification.v1.NotificationService/SendNotification"
	NotificationService_SendNotificationAsync_FullMethodName      = "/notification.v1.NotificationService/SendNotificationAsync"
	NotificationService_SendNotificationBatch_FullMethodName      = "/notification.v1.NotificationService/SendNotificationBatch"
	NotificationService_SendNotificationBatchAsync_FullMethodName = "/notification.v1.NotificationService/SendNotificationBatchAsync"
	NotificationService_PrepareTx_FullMethodName                  = "/notification.v1.NotificationService/PrepareTx"
	NotificationService_CommitTx_FullMethodName                   = "/notification.v1.NotificationService/CommitTx"
	NotificationService_CancelTx_FullMethodName                   = "/notification.v1.NotificationService/CancelTx"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// 同步单挑发送
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// 异步单条发送
	SendNotificationAsync(ctx context.Context, in *SendNotificationAsyncRequest, opts ...grpc.CallOption) (*SendNotificationAsyncResponse, error)
	// 同步批量发送
	SendNotificationBatch(ctx context.Context, in *SendNotificationBatchRequest, opts ...grpc.CallOption) (*SendNotificationBatchResponse, error)
	// 异步批量发送
	SendNotificationBatchAsync(ctx context.Context, in *SendNotificationBatchAsyncRequest, opts ...grpc.CallOption) (*SendNotificationBatchAsyncResponse, error)
	// 准备事务
	PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error)
	// 提交事务
	CommitTx(ctx context.Context, in *CommitTxRequest, opts ...grpc.CallOption) (*CommitTxResponse, error)
	// 取消事务
	CancelTx(ctx context.Context, in *CancelTxRequest, opts ...grpc.CallOption) (*CancelTxResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationAsync(ctx context.Context, in *SendNotificationAsyncRequest, opts ...grpc.CallOption) (*SendNotificationAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationAsyncResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotificationAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationBatch(ctx context.Context, in *SendNotificationBatchRequest, opts ...grpc.CallOption) (*SendNotificationBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationBatchResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotificationBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationBatchAsync(ctx context.Context, in *SendNotificationBatchAsyncRequest, opts ...grpc.CallOption) (*SendNotificationBatchAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationBatchAsyncResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotificationBatchAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTxResponse)
	err := c.cc.Invoke(ctx, NotificationService_PrepareTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CommitTx(ctx context.Context, in *CommitTxRequest, opts ...grpc.CallOption) (*CommitTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitTxResponse)
	err := c.cc.Invoke(ctx, NotificationService_CommitTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CancelTx(ctx context.Context, in *CancelTxRequest, opts ...grpc.CallOption) (*CancelTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTxResponse)
	err := c.cc.Invoke(ctx, NotificationService_CancelTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// 同步单挑发送
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// 异步单条发送
	SendNotificationAsync(context.Context, *SendNotificationAsyncRequest) (*SendNotificationAsyncResponse, error)
	// 同步批量发送
	SendNotificationBatch(context.Context, *SendNotificationBatchRequest) (*SendNotificationBatchResponse, error)
	// 异步批量发送
	SendNotificationBatchAsync(context.Context, *SendNotificationBatchAsyncRequest) (*SendNotificationBatchAsyncResponse, error)
	// 准备事务
	PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error)
	// 提交事务
	CommitTx(context.Context, *CommitTxRequest) (*CommitTxResponse, error)
	// 取消事务
	CancelTx(context.Context, *CancelTxRequest) (*CancelTxResponse, error)
}

// UnimplementedNotificationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationAsync(context.Context, *SendNotificationAsyncRequest) (*SendNotificationAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationAsync not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationBatch(context.Context, *SendNotificationBatchRequest) (*SendNotificationBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationBatch not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationBatchAsync(context.Context, *SendNotificationBatchAsyncRequest) (*SendNotificationBatchAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationBatchAsync not implemented")
}
func (UnimplementedNotificationServiceServer) PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTx not implemented")
}
func (UnimplementedNotificationServiceServer) CommitTx(context.Context, *CommitTxRequest) (*CommitTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTx not implemented")
}
func (UnimplementedNotificationServiceServer) CancelTx(context.Context, *CancelTxRequest) (*CancelTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTx not implemented")
}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotificationAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationAsync(ctx, req.(*SendNotificationAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotificationBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationBatch(ctx, req.(*SendNotificationBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationBatchAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationBatchAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationBatchAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotificationBatchAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationBatchAsync(ctx, req.(*SendNotificationBatchAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_PrepareTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).PrepareTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_PrepareTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).PrepareTx(ctx, req.(*PrepareTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CommitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CommitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CommitTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CommitTx(ctx, req.(*CommitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CancelTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CancelTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CancelTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CancelTx(ctx, req.(*CancelTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "SendNotificationAsync",
			Handler:    _NotificationService_SendNotificationAsync_Handler,
		},
		{
			MethodName: "SendNotificationBatch",
			Handler:    _NotificationService_SendNotificationBatch_Handler,
		},
		{
			MethodName: "SendNotificationBatchAsync",
			Handler:    _NotificationService_SendNotificationBatchAsync_Handler,
		},
		{
			MethodName: "PrepareTx",
			Handler:    _NotificationService_PrepareTx_Handler,
		},
		{
			MethodName: "CommitTx",
			Handler:    _NotificationService_CommitTx_Handler,
		},
		{
			MethodName: "CancelTx",
			Handler:    _NotificationService_CancelTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/notification/v1/notification.proto",
}
